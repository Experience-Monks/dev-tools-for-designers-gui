#!/usr/bin/env node
'use strict';

require('./babel-maybefill');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _configParser = require('./config-parser');

var _forAllFiles = require('./for-all-files');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

process.on('unhandledRejection', function (e) {
  d(e.message || e);
  d(e.stack || '');
});

process.on('uncaughtException', function (e) {
  d(e.message || e);
  d(e.stack || '');
});

var main = (function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(appDir, sourceDirs) {
    var compilerHost, rootCacheDir;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            compilerHost = null;
            rootCacheDir = _path2.default.join(appDir, '.cache');

            _mkdirp2.default.sync(rootCacheDir);

            if (process.env.NODE_ENV !== 'production') {
              console.log('Using NODE_ENV = ' + (process.env.NODE_ENV || 'development'));
            }

            d('main: ' + appDir + ', ' + JSON.stringify(sourceDirs));
            _context2.prev = 5;
            _context2.next = 8;
            return (0, _configParser.createCompilerHostFromProjectRoot)(appDir, rootCacheDir);

          case 8:
            compilerHost = _context2.sent;
            _context2.next = 16;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2['catch'](5);

            console.error('Couldn\'t set up compilers: ' + _context2.t0.message);
            d(_context2.t0.stack);

            throw _context2.t0;

          case 16:
            _context2.next = 18;
            return Promise.all(_lodash2.default.map(sourceDirs, function (dir) {
              return (0, _forAllFiles.forAllFiles)(dir, (function () {
                var _this = this;

                var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(f) {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;

                          d('Starting compilation for ' + f);
                          _context.next = 4;
                          return compilerHost.compile(f);

                        case 4:
                          _context.next = 11;
                          break;

                        case 6:
                          _context.prev = 6;
                          _context.t0 = _context['catch'](0);

                          console.error('Failed to compile file: ' + f);
                          console.error(_context.t0.message);

                          d(_context.t0.stack);

                        case 11:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, _this, [[0, 6]]);
                }));

                return function (_x3) {
                  return ref.apply(this, arguments);
                };
              })());
            }));

          case 18:

            d('Saving out configuration');
            _context2.next = 21;
            return compilerHost.saveConfiguration();

          case 21:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[5, 11]]);
  }));

  return function main(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

var d = require('debug')('electron-compile');

var yargs = require('yargs').usage('Usage: electron-compile --appdir [root-app-dir] paths...').alias('a', 'appdir').describe('a', 'The top-level application directory (i.e. where your package.json is)').help('h').alias('h', 'help').epilog('Copyright 2015');

var argv = yargs.argv;

if (!argv._ || argv._.length < 1) {
  yargs.showHelp();
  process.exit(-1);
}

var sourceDirs = argv._;
var appDir = argv.a || process.env.PWD;

main(appDir, sourceDirs).then(function () {
  return process.exit(0);
}).catch(function (e) {
  console.error(e.message || e);
  d(e.stack);

  console.error("Compilation failed!\nFor extra information, set the DEBUG environment variable to '*'");
  process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,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SSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDaEMsT0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2pCLFNBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNsQjs7QUFFRCxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7O0FBRXpDLElBQUksQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQ3JCLElBQUksQ0FBQztTQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQUEsQ0FBQyxDQUMzQixLQUFLLENBQUMsVUFBQyxDQUFDLEVBQUs7QUFDWixTQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDOUIsR0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFWCxTQUFPLENBQUMsS0FBSyxDQUFDLHVGQUF1RixDQUFDLENBQUM7QUFDdkcsU0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xCLENBQUMsQ0FBQyIsImZpbGUiOiJjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCAnLi9iYWJlbC1tYXliZWZpbGwnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IG1rZGlycCBmcm9tICdta2RpcnAnO1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuaW1wb3J0IHtjcmVhdGVDb21waWxlckhvc3RGcm9tUHJvamVjdFJvb3R9IGZyb20gJy4vY29uZmlnLXBhcnNlcic7XHJcbmltcG9ydCB7Zm9yQWxsRmlsZXN9IGZyb20gJy4vZm9yLWFsbC1maWxlcyc7XHJcblxyXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAoZSkgPT4ge1xyXG4gIGQoZS5tZXNzYWdlIHx8IGUpO1xyXG4gIGQoZS5zdGFjayB8fCAnJyk7XHJcbn0pO1xyXG5cclxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZSkgPT4ge1xyXG4gIGQoZS5tZXNzYWdlIHx8IGUpO1xyXG4gIGQoZS5zdGFjayB8fCAnJyk7XHJcbn0pO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gbWFpbihhcHBEaXIsIHNvdXJjZURpcnMpIHtcclxuICBsZXQgY29tcGlsZXJIb3N0ID0gbnVsbDtcclxuICBsZXQgcm9vdENhY2hlRGlyID0gcGF0aC5qb2luKGFwcERpciwgJy5jYWNoZScpO1xyXG4gIG1rZGlycC5zeW5jKHJvb3RDYWNoZURpcik7XHJcbiAgXHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgIGNvbnNvbGUubG9nKGBVc2luZyBOT0RFX0VOViA9ICR7cHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50J31gKTtcclxuICB9XHJcbiAgXHJcbiAgZChgbWFpbjogJHthcHBEaXJ9LCAke0pTT04uc3RyaW5naWZ5KHNvdXJjZURpcnMpfWApO1xyXG4gIHRyeSB7XHJcbiAgICBjb21waWxlckhvc3QgPSBhd2FpdCBjcmVhdGVDb21waWxlckhvc3RGcm9tUHJvamVjdFJvb3QoYXBwRGlyLCByb290Q2FjaGVEaXIpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkbid0IHNldCB1cCBjb21waWxlcnM6ICR7ZS5tZXNzYWdlfWApO1xyXG4gICAgZChlLnN0YWNrKTtcclxuXHJcbiAgICB0aHJvdyBlO1xyXG4gIH1cclxuICBcclxuICBhd2FpdCBQcm9taXNlLmFsbChfLm1hcChzb3VyY2VEaXJzLCAoZGlyKSA9PiBmb3JBbGxGaWxlcyhkaXIsIGFzeW5jIChmKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBkKGBTdGFydGluZyBjb21waWxhdGlvbiBmb3IgJHtmfWApO1xyXG4gICAgICBhd2FpdCBjb21waWxlckhvc3QuY29tcGlsZShmKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNvbXBpbGUgZmlsZTogJHtmfWApO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XHJcblxyXG4gICAgICBkKGUuc3RhY2spO1xyXG4gICAgfVxyXG4gIH0pKSk7XHJcbiAgXHJcbiAgZCgnU2F2aW5nIG91dCBjb25maWd1cmF0aW9uJyk7XHJcbiAgYXdhaXQgY29tcGlsZXJIb3N0LnNhdmVDb25maWd1cmF0aW9uKCk7XHJcbn1cclxuXHJcbmNvbnN0IGQgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbGVjdHJvbi1jb21waWxlJyk7XHJcblxyXG5jb25zdCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJylcclxuICAudXNhZ2UoJ1VzYWdlOiBlbGVjdHJvbi1jb21waWxlIC0tYXBwZGlyIFtyb290LWFwcC1kaXJdIHBhdGhzLi4uJylcclxuICAuYWxpYXMoJ2EnLCAnYXBwZGlyJylcclxuICAuZGVzY3JpYmUoJ2EnLCAnVGhlIHRvcC1sZXZlbCBhcHBsaWNhdGlvbiBkaXJlY3RvcnkgKGkuZS4gd2hlcmUgeW91ciBwYWNrYWdlLmpzb24gaXMpJylcclxuICAuaGVscCgnaCcpXHJcbiAgLmFsaWFzKCdoJywgJ2hlbHAnKVxyXG4gIC5lcGlsb2coJ0NvcHlyaWdodCAyMDE1Jyk7XHJcblxyXG5jb25zdCBhcmd2ID0geWFyZ3MuYXJndjtcclxuXHJcbmlmICghYXJndi5fIHx8IGFyZ3YuXy5sZW5ndGggPCAxKSB7XHJcbiAgeWFyZ3Muc2hvd0hlbHAoKTtcclxuICBwcm9jZXNzLmV4aXQoLTEpO1xyXG59XHJcblxyXG5jb25zdCBzb3VyY2VEaXJzID0gYXJndi5fO1xyXG5jb25zdCBhcHBEaXIgPSBhcmd2LmEgfHwgcHJvY2Vzcy5lbnYuUFdEO1xyXG5cclxubWFpbihhcHBEaXIsIHNvdXJjZURpcnMpXHJcbiAgLnRoZW4oKCkgPT4gcHJvY2Vzcy5leGl0KDApKVxyXG4gIC5jYXRjaCgoZSkgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UgfHwgZSk7XHJcbiAgICBkKGUuc3RhY2spO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmVycm9yKFwiQ29tcGlsYXRpb24gZmFpbGVkIVxcbkZvciBleHRyYSBpbmZvcm1hdGlvbiwgc2V0IHRoZSBERUJVRyBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byAnKidcIik7XHJcbiAgICBwcm9jZXNzLmV4aXQoLTEpO1xyXG4gIH0pOyAgXHJcbiJdfQ==