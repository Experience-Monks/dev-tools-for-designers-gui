"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * ReadOnlyCompiler is a compiler which allows the host to inject all of the compiler
 * metadata information so that {@link CompileCache} et al are able to recreate the
 * hash without having two separate code paths.
 */

var ReadOnlyCompiler = (function () {
  /**  
   * Creates a ReadOnlyCompiler instance
   *    
   * @private
   */

  function ReadOnlyCompiler(name, compilerVersion, compilerOptions, inputMimeTypes) {
    _classCallCheck(this, ReadOnlyCompiler);

    _lodash2.default.assign(this, { name: name, compilerVersion: compilerVersion, compilerOptions: compilerOptions, inputMimeTypes: inputMimeTypes });
  }

  _createClass(ReadOnlyCompiler, [{
    key: "shouldCompileFile",
    value: (function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", true);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function shouldCompileFile() {
        return ref.apply(this, arguments);
      };
    })()
  }, {
    key: "determineDependentFiles",
    value: (function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", []);

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function determineDependentFiles() {
        return ref.apply(this, arguments);
      };
    })()
  }, {
    key: "compile",
    value: (function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw new Error("Read-only compilers can't compile");

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function compile() {
        return ref.apply(this, arguments);
      };
    })()
  }, {
    key: "shouldCompileFileSync",
    value: function shouldCompileFileSync() {
      return true;
    }
  }, {
    key: "determineDependentFilesSync",
    value: function determineDependentFilesSync() {
      return [];
    }
  }, {
    key: "compileSync",
    value: function compileSync() {
      throw new Error("Read-only compilers can't compile");
    }
  }, {
    key: "getCompilerVersion",
    value: function getCompilerVersion() {
      return this.compilerVersion;
    }
  }]);

  return ReadOnlyCompiler;
})();

exports.default = ReadOnlyCompiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWFkLW9ubHktY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBUXFCLGdCQUFnQjs7Ozs7OztBQU1uQyxXQU5tQixnQkFBZ0IsQ0FNdkIsSUFBSSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFOzBCQU5qRCxnQkFBZ0I7O0FBT2pDLHFCQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUosSUFBSSxFQUFFLGVBQWUsRUFBZixlQUFlLEVBQUUsZUFBZSxFQUFmLGVBQWUsRUFBRSxjQUFjLEVBQWQsY0FBYyxFQUFFLENBQUMsQ0FBQztHQUM1RTs7ZUFSa0IsZ0JBQWdCOzs7Ozs7OztpREFVQSxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tEQUNFLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBR25DLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OzRDQUc5QjtBQUFFLGFBQU8sSUFBSSxDQUFDO0tBQUU7OztrREFDVjtBQUFFLGFBQU8sRUFBRSxDQUFDO0tBQUU7OztrQ0FFOUI7QUFDWixZQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7S0FDdEQ7Ozt5Q0FFb0I7QUFDbkIsYUFBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0tBQzdCOzs7U0ExQmtCLGdCQUFnQjs7O2tCQUFoQixnQkFBZ0IiLCJmaWxlIjoicmVhZC1vbmx5LWNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuXHJcblxyXG4vKipcclxuICogUmVhZE9ubHlDb21waWxlciBpcyBhIGNvbXBpbGVyIHdoaWNoIGFsbG93cyB0aGUgaG9zdCB0byBpbmplY3QgYWxsIG9mIHRoZSBjb21waWxlclxyXG4gKiBtZXRhZGF0YSBpbmZvcm1hdGlvbiBzbyB0aGF0IHtAbGluayBDb21waWxlQ2FjaGV9IGV0IGFsIGFyZSBhYmxlIHRvIHJlY3JlYXRlIHRoZVxyXG4gKiBoYXNoIHdpdGhvdXQgaGF2aW5nIHR3byBzZXBhcmF0ZSBjb2RlIHBhdGhzLlxyXG4gKi8gXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWRPbmx5Q29tcGlsZXIge1xyXG4gIC8qKiAgXHJcbiAgICogQ3JlYXRlcyBhIFJlYWRPbmx5Q29tcGlsZXIgaW5zdGFuY2VcclxuICAgKiAgICBcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqLyAgIFxyXG4gIGNvbnN0cnVjdG9yKG5hbWUsIGNvbXBpbGVyVmVyc2lvbiwgY29tcGlsZXJPcHRpb25zLCBpbnB1dE1pbWVUeXBlcykge1xyXG4gICAgXy5hc3NpZ24odGhpcywgeyBuYW1lLCBjb21waWxlclZlcnNpb24sIGNvbXBpbGVyT3B0aW9ucywgaW5wdXRNaW1lVHlwZXMgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGFzeW5jIHNob3VsZENvbXBpbGVGaWxlKCkgeyByZXR1cm4gdHJ1ZTsgfVxyXG4gIGFzeW5jIGRldGVybWluZURlcGVuZGVudEZpbGVzKCkgeyByZXR1cm4gW107IH1cclxuXHJcbiAgYXN5bmMgY29tcGlsZSgpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWQtb25seSBjb21waWxlcnMgY2FuJ3QgY29tcGlsZVwiKTtcclxuICB9XHJcblxyXG4gIHNob3VsZENvbXBpbGVGaWxlU3luYygpIHsgcmV0dXJuIHRydWU7IH1cclxuICBkZXRlcm1pbmVEZXBlbmRlbnRGaWxlc1N5bmMoKSB7IHJldHVybiBbXTsgfVxyXG5cclxuICBjb21waWxlU3luYygpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWQtb25seSBjb21waWxlcnMgY2FuJ3QgY29tcGlsZVwiKTtcclxuICB9XHJcblxyXG4gIGdldENvbXBpbGVyVmVyc2lvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbXBpbGVyVmVyc2lvbjtcclxuICB9XHJcbn1cclxuIl19