'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _digestForObject = require('./digest-for-object');

var _digestForObject2 = _interopRequireDefault(_digestForObject);

var _promise = require('./promise');

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var d = require('debug')('electron-compile:compile-cache');

/**
 * CompileCache manages getting and setting entries for a single compiler; each
 * in-use compiler will have an instance of this class, usually created via
 * {@link createFromCompiler}. 
 * 
 * You usually will not use this class directly, it is an implementation class 
 * for {@link CompileHost}.
 */

var CompileCache = (function () {
  /**  
   * Creates an instance, usually used for testing only.
   *    
   * @param  {string} cachePath  The root directory to use as a cache path
   *
   * @param  {FileChangedCache} fileChangeCache  A file-change cache that is 
   *                                             optionally pre-loaded.
   */

  function CompileCache(cachePath, fileChangeCache) {
    _classCallCheck(this, CompileCache);

    this.cachePath = cachePath;
    this.fileChangeCache = fileChangeCache;
  }

  /**  
   * Creates a CompileCache from a class compatible with the CompilerBase 
   * interface. This method uses the compiler name / version / options to 
   * generate a unique directory name for cached results
   *    
   * @param  {string} cachePath  The root path to use for the cache, a directory
   *                             representing the hash of the compiler parameters
   *                             will be created here.
   *
   * @param  {CompilerBase} compiler  The compiler to use for version / option
   *                                  information.
   *
   * @param  {FileChangedCache} fileChangeCache  A file-change cache that is 
   *                                             optionally pre-loaded.
   *
   * @param  {boolean} readOnlyMode  Don't attempt to create the cache directory.
   *
   * @return {CompileCache}  A configured CompileCache instance.
   */

  _createClass(CompileCache, [{
    key: 'get',

    /**  
     * Returns a file's compiled contents from the cache.
     *    
     * @param  {string} filePath  The path to the file. FileChangedCache will look
     *                            up the hash and use that as the key in the cache.
     *
     * @return {Promise<Object>}  An object with all kinds of information
     *
     * @property {Object} hashInfo  The hash information returned from getHashForPath
     * @property {string} code  The source code if the file was a text file
     * @property {Buffer} binaryData  The file if it was a binary file
     * @property {string} mimeType  The MIME type saved in the cache.
     * @property {string[]} dependentFiles  The dependent files returned from 
     *                                      compiling the file, if any.
     */
    value: (function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(filePath) {
        var hashInfo, code, mimeType, binaryData, dependentFiles, cacheFile, result, info, buf, str;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                d('Fetching ' + filePath + ' from cache');
                _context.next = 3;
                return this.fileChangeCache.getHashForPath(_path2.default.resolve(filePath));

              case 3:
                hashInfo = _context.sent;
                code = null;
                mimeType = null;
                binaryData = null;
                dependentFiles = null;
                cacheFile = null;
                _context.prev = 9;

                cacheFile = _path2.default.join(this.getCachePath(), hashInfo.hash);
                result = null;

                if (!hashInfo.isFileBinary) {
                  _context.next = 31;
                  break;
                }

                d("File is binary, reading out info");
                _context.t0 = JSON;
                _context.next = 17;
                return _promise.pfs.readFile(cacheFile + '.info');

              case 17:
                _context.t1 = _context.sent;
                info = _context.t0.parse.call(_context.t0, _context.t1);

                mimeType = info.mimeType;
                dependentFiles = info.dependentFiles;

                binaryData = hashInfo.binaryData;

                if (binaryData) {
                  _context.next = 29;
                  break;
                }

                _context.next = 25;
                return _promise.pfs.readFile(cacheFile);

              case 25:
                binaryData = _context.sent;
                _context.next = 28;
                return _promise.pzlib.gunzip(binaryData);

              case 28:
                binaryData = _context.sent;

              case 29:
                _context.next = 41;
                break;

              case 31:
                _context.next = 33;
                return _promise.pfs.readFile(cacheFile);

              case 33:
                buf = _context.sent;
                _context.next = 36;
                return _promise.pzlib.gunzip(buf);

              case 36:
                str = _context.sent.toString('utf8');

                result = JSON.parse(str);
                code = result.code;
                mimeType = result.mimeType;
                dependentFiles = result.dependentFiles;

              case 41:
                _context.next = 46;
                break;

              case 43:
                _context.prev = 43;
                _context.t2 = _context['catch'](9);

                d('Failed to read cache for ' + filePath + ', looked in ' + cacheFile + ': ' + _context.t2.message);

              case 46:
                return _context.abrupt('return', { hashInfo: hashInfo, code: code, mimeType: mimeType, binaryData: binaryData, dependentFiles: dependentFiles });

              case 47:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[9, 43]]);
      }));

      return function get(_x) {
        return ref.apply(this, arguments);
      };
    })()

    /**  
     * Saves a compiled result to cache
     *    
     * @param  {Object} hashInfo  The hash information returned from getHashForPath   
     *
     * @param  {string / Buffer} codeOrBinaryData   The file's contents, either as
     *                                              a string or a Buffer.
     * @param  {string} mimeType  The MIME type returned by the compiler.
     *
     * @param  {string[]} dependentFiles  The list of dependent files returned by
     *                                    the compiler.
     * @return {Promise}  Completion.
     */

  }, {
    key: 'save',
    value: (function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(hashInfo, codeOrBinaryData, mimeType, dependentFiles) {
        var buf, target;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                buf = null;
                target = _path2.default.join(this.getCachePath(), hashInfo.hash);

                d('Saving to ' + target);

                if (!hashInfo.isFileBinary) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 6;
                return _promise.pzlib.gzip(codeOrBinaryData);

              case 6:
                buf = _context2.sent;
                _context2.next = 9;
                return _promise.pfs.writeFile(target + '.info', JSON.stringify({ mimeType: mimeType, dependentFiles: dependentFiles }), 'utf8');

              case 9:
                _context2.next = 14;
                break;

              case 11:
                _context2.next = 13;
                return _promise.pzlib.gzip(new Buffer(JSON.stringify({ code: codeOrBinaryData, mimeType: mimeType, dependentFiles: dependentFiles })));

              case 13:
                buf = _context2.sent;

              case 14:
                _context2.next = 16;
                return _promise.pfs.writeFile(target, buf);

              case 16:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function save(_x2, _x3, _x4, _x5) {
        return ref.apply(this, arguments);
      };
    })()

    /**  
     * Attempts to first get a key via {@link get}, then if it fails, call a method
     * to retrieve the contents, then save the result to cache.
     * 
     * The fetcher parameter is expected to have the signature:
     * 
     * Promise<Object> fetcher(filePath : string, hashInfo : Object);
     * 
     * hashInfo is a value returned from getHashForPath
     * The return value of fetcher must be an Object with the properties:
     * 
     * mimeType - the MIME type of the data to save
     * code (optional) - the source code as a string, if file is text
     * binaryData (optional) - the file contents as a Buffer, if file is binary
     * dependentFiles - the dependent files returned by the compiler.
     *
     * @param  {string} filePath  The path to the file. FileChangedCache will look
     *                            up the hash and use that as the key in the cache.
     *
     * @param  {Function} fetcher  A method which conforms to the description above.
     *
     * @return {Promise<Object>}  An Object which has the same fields as the 
     *                            {@link get} method return result.
     */

  }, {
    key: 'getOrFetch',
    value: (function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(filePath, fetcher) {
        var cacheResult, result;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.get(filePath);

              case 2:
                cacheResult = _context3.sent;

                if (!(cacheResult.code || cacheResult.binaryData)) {
                  _context3.next = 5;
                  break;
                }

                return _context3.abrupt('return', cacheResult);

              case 5:
                _context3.next = 7;
                return fetcher(filePath, cacheResult.hashInfo);

              case 7:
                _context3.t0 = _context3.sent;

                if (_context3.t0) {
                  _context3.next = 10;
                  break;
                }

                _context3.t0 = { hashInfo: cacheResult.hashInfo };

              case 10:
                result = _context3.t0;

                if (!(result.mimeType && !cacheResult.hashInfo.isInNodeModules)) {
                  _context3.next = 15;
                  break;
                }

                d('Cache miss: saving out info for ' + filePath);
                _context3.next = 15;
                return this.save(cacheResult.hashInfo, result.code || result.binaryData, result.mimeType, result.dependentFiles);

              case 15:

                result.hashInfo = cacheResult.hashInfo;
                return _context3.abrupt('return', result);

              case 17:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function getOrFetch(_x6, _x7) {
        return ref.apply(this, arguments);
      };
    })()
  }, {
    key: 'getSync',
    value: function getSync(filePath) {
      d('Fetching ' + filePath + ' from cache');
      var hashInfo = this.fileChangeCache.getHashForPathSync(_path2.default.resolve(filePath));

      var code = null;
      var mimeType = null;
      var binaryData = null;
      var dependentFiles = null;

      try {
        var cacheFile = _path2.default.join(this.getCachePath(), hashInfo.hash);

        var _result = null;
        if (hashInfo.isFileBinary) {
          d("File is binary, reading out info");
          var _info = JSON.parse(_fs2.default.readFileSync(cacheFile + '.info'));
          mimeType = _info.mimeType;
          dependentFiles = _info.dependentFiles;

          binaryData = hashInfo.binaryData;
          if (!binaryData) {
            binaryData = _fs2.default.readFileSync(cacheFile);
            binaryData = _zlib2.default.gunzipSync(binaryData);
          }
        } else {
          var _buf = _fs2.default.readFileSync(cacheFile);
          var _str = _zlib2.default.gunzipSync(_buf).toString('utf8');

          _result = JSON.parse(_str);
          code = _result.code;
          mimeType = _result.mimeType;
          dependentFiles = _result.dependentFiles;
        }
      } catch (e) {
        d('Failed to read cache for ' + filePath);
      }

      return { hashInfo: hashInfo, code: code, mimeType: mimeType, binaryData: binaryData, dependentFiles: dependentFiles };
    }
  }, {
    key: 'saveSync',
    value: function saveSync(hashInfo, codeOrBinaryData, mimeType, dependentFiles) {
      var buf = null;
      var target = _path2.default.join(this.getCachePath(), hashInfo.hash);
      d('Saving to ' + target);

      if (hashInfo.isFileBinary) {
        buf = _zlib2.default.gzipSync(codeOrBinaryData);
        _fs2.default.writeFileSync(target + '.info', JSON.stringify({ mimeType: mimeType, dependentFiles: dependentFiles }), 'utf8');
      } else {
        buf = _zlib2.default.gzipSync(new Buffer(JSON.stringify({ code: codeOrBinaryData, mimeType: mimeType, dependentFiles: dependentFiles })));
      }

      _fs2.default.writeFileSync(target, buf);
    }
  }, {
    key: 'getOrFetchSync',
    value: function getOrFetchSync(filePath, fetcher) {
      var cacheResult = this.getSync(filePath);
      if (cacheResult.code || cacheResult.binaryData) return cacheResult;

      var result = fetcher(filePath, cacheResult.hashInfo) || { hashInfo: cacheResult.hashInfo };

      if (result.mimeType && !cacheResult.hashInfo.isInNodeModules) {
        d('Cache miss: saving out info for ' + filePath);
        this.saveSync(cacheResult.hashInfo, result.code || result.binaryData, result.mimeType, result.dependentFiles);
      }

      result.hashInfo = cacheResult.hashInfo;
      return result;
    }

    /**  
     * @private
     */

  }, {
    key: 'getCachePath',
    value: function getCachePath() {
      // NB: This is an evil hack so that createFromCompiler can stomp it
      // at will
      return this.cachePath;
    }

    /**    
     * Returns whether a file should not be compiled. Note that this doesn't 
     * necessarily mean it won't end up in the cache, only that its contents are
     * saved verbatim instead of trying to find an appropriate compiler.
     *    
     * @param  {Object} hashInfo  The hash information returned from getHashForPath   
     *
     * @return {boolean}  True if a file should be ignored
     */

  }], [{
    key: 'createFromCompiler',
    value: function createFromCompiler(cachePath, compiler, fileChangeCache) {
      var readOnlyMode = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

      var newCachePath = null;
      var getCachePath = function getCachePath() {
        if (newCachePath) return newCachePath;

        var digestObj = {
          name: compiler.name || Object.getPrototypeOf(compiler).constructor.name,
          version: compiler.getCompilerVersion(),
          options: compiler.compilerOptions
        };

        newCachePath = _path2.default.join(cachePath, (0, _digestForObject2.default)(digestObj));

        d('Path for ' + digestObj.name + ': ' + newCachePath);
        d('Set up with parameters: ' + JSON.stringify(digestObj));

        if (!readOnlyMode) _mkdirp2.default.sync(newCachePath);
        return newCachePath;
      };

      var ret = new CompileCache('', fileChangeCache);
      ret.getCachePath = getCachePath;

      return ret;
    }
  }, {
    key: 'shouldPassthrough',
    value: function shouldPassthrough(hashInfo) {
      return hashInfo.isMinified || hashInfo.isInNodeModules || hashInfo.hasSourceMap || hashInfo.isFileBinary;
    }
  }]);

  return CompileCache;
})();

exports.default = CompileCache;
//# sourceMappingURL=data:application/json;base64,