'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forAllFiles = forAllFiles;
exports.forAllFilesSync = forAllFilesSync;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _promise = require('./promise');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

/**
 * Invokes a method on all files in a directory recursively.
 * 
 * @private
 */
function forAllFiles(rootDirectory, func) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var rec = (function () {
    var _this = this;

    var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(dir) {
      var entries, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, name, fullName, stats;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _promise.pfs.readdir(dir);

            case 2:
              entries = _context.sent;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 6;
              _iterator = entries[Symbol.iterator]();

            case 8:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 23;
                break;
              }

              name = _step.value;
              fullName = _path2.default.join(dir, name);
              _context.next = 13;
              return _promise.pfs.stat(fullName);

            case 13:
              stats = _context.sent;

              if (!stats.isDirectory()) {
                _context.next = 17;
                break;
              }

              _context.next = 17;
              return rec(fullName);

            case 17:
              if (!stats.isFile()) {
                _context.next = 20;
                break;
              }

              _context.next = 20;
              return func.apply(undefined, [fullName].concat(args));

            case 20:
              _iteratorNormalCompletion = true;
              _context.next = 8;
              break;

            case 23:
              _context.next = 29;
              break;

            case 25:
              _context.prev = 25;
              _context.t0 = _context['catch'](6);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 29:
              _context.prev = 29;
              _context.prev = 30;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 32:
              _context.prev = 32;

              if (!_didIteratorError) {
                _context.next = 35;
                break;
              }

              throw _iteratorError;

            case 35:
              return _context.finish(32);

            case 36:
              return _context.finish(29);

            case 37:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this, [[6, 25, 29, 37], [30,, 32, 36]]);
    }));

    return function rec(_x) {
      return ref.apply(this, arguments);
    };
  })();

  return rec(rootDirectory);
}

function forAllFilesSync(rootDirectory, func) {
  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  var rec = function rec(dir) {
    _lodash2.default.each(_fs2.default.readdirSync(dir), function (name) {
      var fullName = _path2.default.join(dir, name);
      var stats = _fs2.default.statSync(fullName);

      if (stats.isDirectory()) {
        rec(fullName);
        return;
      }

      if (stats.isFile()) {
        func.apply(undefined, [fullName].concat(args));
        return;
      }
    });
  };

  rec(rootDirectory);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mb3ItYWxsLWZpbGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBV2dCLFdBQVcsR0FBWCxXQUFXO1FBcUJYLGVBQWUsR0FBZixlQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBckJ4QixTQUFTLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFXO29DQUFOLElBQUk7QUFBSixRQUFJOzs7QUFDdEQsTUFBSSxHQUFHOzs7d0RBQUcsaUJBQU8sR0FBRztVQUNkLE9BQU8sa0ZBRUYsSUFBSSxFQUNQLFFBQVEsRUFDUixLQUFLOzs7Ozs7O3FCQUpTLFNBVmhCLEdBQUcsQ0FVaUIsT0FBTyxDQUFDLEdBQUcsQ0FBQzs7O0FBQWhDLHFCQUFPOzs7OzswQkFFTSxPQUFPOzs7Ozs7OztBQUFmLGtCQUFJO0FBQ1Asc0JBQVEsR0FBRyxlQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDOztxQkFDakIsU0FkaEIsR0FBRyxDQWNpQixJQUFJLENBQUMsUUFBUSxDQUFDOzs7QUFBaEMsbUJBQUs7O21CQUVMLEtBQUssQ0FBQyxXQUFXLEVBQUU7Ozs7OztxQkFDZixHQUFHLENBQUMsUUFBUSxDQUFDOzs7bUJBR2pCLEtBQUssQ0FBQyxNQUFNLEVBQUU7Ozs7OztxQkFDVixJQUFJLG1CQUFDLFFBQVEsU0FBSyxJQUFJLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR2xDOztvQkFmRyxHQUFHOzs7TUFlTixDQUFDOztBQUVGLFNBQU8sR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQzNCOztBQUVNLFNBQVMsZUFBZSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQVc7cUNBQU4sSUFBSTtBQUFKLFFBQUk7OztBQUMxRCxNQUFJLEdBQUcsR0FBRyxTQUFOLEdBQUcsQ0FBSSxHQUFHLEVBQUs7QUFDakIscUJBQUUsSUFBSSxDQUFDLGFBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQUMsSUFBSSxFQUFLO0FBQ3BDLFVBQUksUUFBUSxHQUFHLGVBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwQyxVQUFJLEtBQUssR0FBRyxhQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFbEMsVUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUU7QUFDdkIsV0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2QsZUFBTztPQUNSOztBQUVELFVBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO0FBQ2xCLFlBQUksbUJBQUMsUUFBUSxTQUFLLElBQUksRUFBQyxDQUFDO0FBQ3hCLGVBQU87T0FDUjtLQUNGLENBQUMsQ0FBQztHQUNKLENBQUM7O0FBRUYsS0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQ3BCIiwiZmlsZSI6ImZvci1hbGwtZmlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHtwZnN9IGZyb20gJy4vcHJvbWlzZSc7XHJcblxyXG5cclxuLyoqXHJcbiAqIEludm9rZXMgYSBtZXRob2Qgb24gYWxsIGZpbGVzIGluIGEgZGlyZWN0b3J5IHJlY3Vyc2l2ZWx5LlxyXG4gKiBcclxuICogQHByaXZhdGVcclxuICovIFxyXG5leHBvcnQgZnVuY3Rpb24gZm9yQWxsRmlsZXMocm9vdERpcmVjdG9yeSwgZnVuYywgLi4uYXJncykge1xyXG4gIGxldCByZWMgPSBhc3luYyAoZGlyKSA9PiB7XHJcbiAgICBsZXQgZW50cmllcyA9IGF3YWl0IHBmcy5yZWFkZGlyKGRpcik7XHJcbiAgICBcclxuICAgIGZvciAobGV0IG5hbWUgb2YgZW50cmllcykge1xyXG4gICAgICBsZXQgZnVsbE5hbWUgPSBwYXRoLmpvaW4oZGlyLCBuYW1lKTtcclxuICAgICAgbGV0IHN0YXRzID0gYXdhaXQgcGZzLnN0YXQoZnVsbE5hbWUpO1xyXG5cclxuICAgICAgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcclxuICAgICAgICBhd2FpdCByZWMoZnVsbE5hbWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3RhdHMuaXNGaWxlKCkpIHtcclxuICAgICAgICBhd2FpdCBmdW5jKGZ1bGxOYW1lLCAuLi5hcmdzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiByZWMocm9vdERpcmVjdG9yeSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JBbGxGaWxlc1N5bmMocm9vdERpcmVjdG9yeSwgZnVuYywgLi4uYXJncykge1xyXG4gIGxldCByZWMgPSAoZGlyKSA9PiB7XHJcbiAgICBfLmVhY2goZnMucmVhZGRpclN5bmMoZGlyKSwgKG5hbWUpID0+IHtcclxuICAgICAgbGV0IGZ1bGxOYW1lID0gcGF0aC5qb2luKGRpciwgbmFtZSk7XHJcbiAgICAgIGxldCBzdGF0cyA9IGZzLnN0YXRTeW5jKGZ1bGxOYW1lKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XHJcbiAgICAgICAgcmVjKGZ1bGxOYW1lKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChzdGF0cy5pc0ZpbGUoKSkge1xyXG4gICAgICAgIGZ1bmMoZnVsbE5hbWUsIC4uLmFyZ3MpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuICBcclxuICByZWMocm9vdERpcmVjdG9yeSk7XHJcbn1cclxuIl19