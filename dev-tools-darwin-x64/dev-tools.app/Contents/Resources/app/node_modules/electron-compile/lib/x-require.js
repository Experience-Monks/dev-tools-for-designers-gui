'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function requireModule(href) {
  var filePath = href;

  if (filePath.match(/^file:/i)) {
    var theUrl = _url2.default.parse(filePath);
    filePath = decodeURIComponent(theUrl.pathname);

    if (process.platform === 'win32') {
      filePath = filePath.slice(1);
    }
  }

  // NB: We don't do any path canonicalization here because we rely on
  // InlineHtmlCompiler to have already converted any relative paths that
  // were used with x-require into absolute paths.
  require(filePath);
}

/**
 * @private
 */

exports.default = (function () {
  if (process.type !== 'renderer' || !window || !window.document) return null;

  var proto = _lodash2.default.extend(Object.create(HTMLElement.prototype), {
    createdCallback: function createdCallback() {
      var href = this.getAttribute('src');
      if (href && href.length > 0) {
        requireModule(href);
      }
    },
    attributeChangedCallback: function attributeChangedCallback(attrName, oldVal, newVal) {
      if (attrName !== 'src') return;
      requireModule(newVal);
    }
  });

  return document.registerElement('x-require', { prototype: proto });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy94LXJlcXVpcmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUdBLFNBQVMsYUFBYSxDQUFDLElBQUksRUFBRTtBQUMzQixNQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7O0FBRXBCLE1BQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUM3QixRQUFJLE1BQU0sR0FBRyxjQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxZQUFRLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUUvQyxRQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUFFO0FBQ2hDLGNBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0dBQ0Y7Ozs7O0FBQUEsQUFLRCxTQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDbkI7Ozs7O0FBQUE7a0JBS2MsQ0FBQyxZQUFNO0FBQ3BCLE1BQUksT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sSUFBSSxDQUFDOztBQUU1RSxNQUFJLEtBQUssR0FBRyxpQkFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDekQsbUJBQWUsRUFBRSwyQkFBVztBQUMxQixVQUFJLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLFVBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQzNCLHFCQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDckI7S0FDRjtBQUNELDRCQUF3QixFQUFFLGtDQUFTLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQzNELFVBQUksUUFBUSxLQUFLLEtBQUssRUFBRSxPQUFPO0FBQy9CLG1CQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkI7R0FDRixDQUFDLENBQUM7O0FBRUgsU0FBTyxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0NBQ3BFLENBQUEsRUFBRyIsImZpbGUiOiJ4LXJlcXVpcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XHJcblxyXG5mdW5jdGlvbiByZXF1aXJlTW9kdWxlKGhyZWYpIHtcclxuICBsZXQgZmlsZVBhdGggPSBocmVmO1xyXG4gIFxyXG4gIGlmIChmaWxlUGF0aC5tYXRjaCgvXmZpbGU6L2kpKSB7XHJcbiAgICBsZXQgdGhlVXJsID0gdXJsLnBhcnNlKGZpbGVQYXRoKTtcclxuICAgIGZpbGVQYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHRoZVVybC5wYXRobmFtZSk7XHJcblxyXG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcclxuICAgICAgZmlsZVBhdGggPSBmaWxlUGF0aC5zbGljZSgxKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gTkI6IFdlIGRvbid0IGRvIGFueSBwYXRoIGNhbm9uaWNhbGl6YXRpb24gaGVyZSBiZWNhdXNlIHdlIHJlbHkgb25cclxuICAvLyBJbmxpbmVIdG1sQ29tcGlsZXIgdG8gaGF2ZSBhbHJlYWR5IGNvbnZlcnRlZCBhbnkgcmVsYXRpdmUgcGF0aHMgdGhhdFxyXG4gIC8vIHdlcmUgdXNlZCB3aXRoIHgtcmVxdWlyZSBpbnRvIGFic29sdXRlIHBhdGhzLlxyXG4gIHJlcXVpcmUoZmlsZVBhdGgpO1xyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovIFxyXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4ge1xyXG4gIGlmIChwcm9jZXNzLnR5cGUgIT09ICdyZW5kZXJlcicgfHwgIXdpbmRvdyB8fCAhd2luZG93LmRvY3VtZW50KSByZXR1cm4gbnVsbDtcclxuICBcclxuICBsZXQgcHJvdG8gPSBfLmV4dGVuZChPYmplY3QuY3JlYXRlKEhUTUxFbGVtZW50LnByb3RvdHlwZSksIHtcclxuICAgIGNyZWF0ZWRDYWxsYmFjazogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGxldCBocmVmID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xyXG4gICAgICBpZiAoaHJlZiAmJiBocmVmLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZXF1aXJlTW9kdWxlKGhyZWYpO1xyXG4gICAgICB9XHJcbiAgICB9LCBcclxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazogZnVuY3Rpb24oYXR0ck5hbWUsIG9sZFZhbCwgbmV3VmFsKSB7XHJcbiAgICAgIGlmIChhdHRyTmFtZSAhPT0gJ3NyYycpIHJldHVybjtcclxuICAgICAgcmVxdWlyZU1vZHVsZShuZXdWYWwpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCd4LXJlcXVpcmUnLCB7IHByb3RvdHlwZTogcHJvdG8gfSk7XHJcbn0pKCk7XHJcbiJdfQ==